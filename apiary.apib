FORMAT: 1A
HOST: https://localhost:8080

# AgendaService

AgendaService is a simple API allowing users to manage their schedules online.

Common Response Code and Message:
Code | Message               | description
---- | -------               | -----------
200  | OK                    | the request has succeeded
400  | {parameter1, ...}     | missing parameters
500  | Internal Server Error | Internal server error occurs
501  | Not Implement         | server does not support the functionality

Some common responses:

+ Response 200 (application/json)

        {
            "message":"OK",
            "data":
                    ...
        }

+ Response 400 (application/json)

        {
            "message":"{parameter1, ...}",
            "data": null
        }
        
+ Response 500 (application/json)

        {
            "message":"Internal Server Error",
            "data": null
        }

+ Response 501 (application/json)

        {
            "message":"Not Implement",
            "data": null
        }
  
# Group Access Authorization and Control

Access and Control of Authorization.

## Authentication [/v1/auth{?username,password,token}]

Authorization Resource represents an authorization granted to the user. You can **only** access your own authorization.

The Authorization Resource has the following attribute:

+ token

Response Code and Message:
Code | Message      | description
---- | -------      | -----------
200  | OK           | log in successfully
204  | No Content   | log out successfully
401  | Unauthorized | log out fail
403  | Forbidden    | log in fail

### Retrieve Authorization [GET]

Get an Authentication token for operations later.

+ Parameters
    - username : `VinaLx` (string, required) - User Name
    - password : `vpass` (string, required) - User Password

+ Response 200 (application/json)

        {
            "message":"OK",
            "data":
                    {
                        "token":"1a2b3c"
                    }
        }
        
+ Response 403 (application/json)

        {
            "message":"Forbidden",
            "data": null
        }


### Remove an Authorization [DELETE]

Remove an Authorization token from database.

+ Parameters
    - token : `1a2b3c` (string, required) - Auth Token

+ Response 204

+ Response 401 (application/json)

        {
            "message":"Unauthorized",
            "data": null
        }


# Group User

A User object has the following attributes:

+ username (string)
+ password (string)
+ email (string)
+ phone (string)


## User [/v1/users/{username}{?token}]

It contains the operations of a user object.

Response Code and Reason:
Code | Message      | description
---- | -------      | -----------
200  | OK           | retrive successfully
204  | No Content   | delete successfully
401  | Unauthorized | authorization fail
404  | Not Found    | no such user

+ Parameters
    - token : `1a2b3c` (string, required) - Auth Token

### Retrive A User [GET]

Return a specific user with username.

+ Response 200 (application/json)

        {
            "message":"OK",
            "data":
                    {
                        "username":"VinaLx",
                        "email":"VinaLx@mail2.sysu.edu.cn",
                        "phone":"13766666666"
                    }
        }

+ Response 401 (application/json)

        {
            "message":"Unauthorized",
            "data": null
        }

+ Response 404 (application/json)

        {
            "message":"Not Found",
            "data": null
        }

### Delete A User [DELETE]

To delete the user account with username from database.

+ Response 204

+ Response 401 (application/json)

        {
            "message":"Unauthorized",
            "data": null
        }

+ Response 404 (application/json)

        {
            "message":"Not Found",
            "data": null
        }


## Users Collection [/v1/users{?token}]

It contains the operations of a users collection.

Response Code and Reason:
Code | Message      | description
---- | -------      | -----------
200  | OK           | list successfully
201  | Created      | create successfully
401  | Unauthorized | have not log in
409  | Conflict     | the username already exists

### Create A User [POST]

To create a new account. It takes a JSON object containing a username, a password and a email address as its parament. The username should be unique.

+ username (string) - User's name
+ password (string) - User's password
+ email (string) - User's email address
+ phone (string) - User's phone number

+ Request (application/json)

        {
            "username":"VinaLx",
            "password":"vpass",
            "email":"VinaLx@mail2.sysu.edu.cn",
            "phone":"13766666666"
        }

+ Response 201 (application/json)

        {
            "message":"Created",
            "data":
                    {
                        "username":"VinaLx",
                        "email":"VinaLx@mail2.sysu.edu.cn",
                        "phone":"13766666666"
                    }
        }

+ Response 409 (application/json)

        {
            "message":"Conflict",
            "data": null
        }

### List all Users [GET]

To view all the users.

+ Parameters
    - token : `1a2b3c` (string, required) - Auth Token

+ Response 200 (application/json)

        {
            "message":"OK"
            "data":
                    [
                        {
                            "username":"VinaLx",
                            "email":"VinaLx@mail2.sysu.edu.cn",
                            "phone":"13766666666"
                        }, {
                            "username":"ZexinYan",
                            "email":"ZexinYan@mail2.sysu.edu.cn",
                            "phone":"13866666666"
                        }, {
                            "username":"Jarvis",
                            "email":"Jarvis@mail2.sysu.edu.cn",
                            "phone":"13966666666"
                        }
                    ]
        }
        
+ Response 401 (application/json)

        {
            "message":"Unauthorized",
            "data": null
        }